/*
 * This file is generated by jOOQ.
 */
package com.yg.gqlwfdl.dataaccess.db.tables;


import com.yg.gqlwfdl.dataaccess.db.Indexes;
import com.yg.gqlwfdl.dataaccess.db.Keys;
import com.yg.gqlwfdl.dataaccess.db.Public;
import com.yg.gqlwfdl.dataaccess.db.tables.records.CompanyPartnershipRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyPartnership extends TableImpl<CompanyPartnershipRecord> {

    private static final long serialVersionUID = -1404964407;

    /**
     * The reference instance of <code>public.company_partnership</code>
     */
    public static final CompanyPartnership COMPANY_PARTNERSHIP = new CompanyPartnership();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyPartnershipRecord> getRecordType() {
        return CompanyPartnershipRecord.class;
    }

    /**
     * The column <code>public.company_partnership.id</code>.
     */
    public final TableField<CompanyPartnershipRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('company_partnership_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.company_partnership.company_a</code>.
     */
    public final TableField<CompanyPartnershipRecord, Long> COMPANY_A = createField("company_a", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.company_partnership.company_b</code>.
     */
    public final TableField<CompanyPartnershipRecord, Long> COMPANY_B = createField("company_b", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.company_partnership</code> table reference
     */
    public CompanyPartnership() {
        this(DSL.name("company_partnership"), null);
    }

    /**
     * Create an aliased <code>public.company_partnership</code> table reference
     */
    public CompanyPartnership(String alias) {
        this(DSL.name(alias), COMPANY_PARTNERSHIP);
    }

    /**
     * Create an aliased <code>public.company_partnership</code> table reference
     */
    public CompanyPartnership(Name alias) {
        this(alias, COMPANY_PARTNERSHIP);
    }

    private CompanyPartnership(Name alias, Table<CompanyPartnershipRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyPartnership(Name alias, Table<CompanyPartnershipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CompanyPartnership(Table<O> child, ForeignKey<O, CompanyPartnershipRecord> key) {
        super(child, key, COMPANY_PARTNERSHIP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPANY_PARTNERSHIP_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CompanyPartnershipRecord, Long> getIdentity() {
        return Keys.IDENTITY_COMPANY_PARTNERSHIP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CompanyPartnershipRecord> getPrimaryKey() {
        return Keys.COMPANY_PARTNERSHIP_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CompanyPartnershipRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyPartnershipRecord>>asList(Keys.COMPANY_PARTNERSHIP_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyPartnership as(String alias) {
        return new CompanyPartnership(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyPartnership as(Name alias) {
        return new CompanyPartnership(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyPartnership rename(String name) {
        return new CompanyPartnership(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyPartnership rename(Name name) {
        return new CompanyPartnership(name, null);
    }
}
